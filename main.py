#!/usr/bin/env python
# -*- coding: utf-8 -*-
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from load import bot, dp
from aiogram import types
from FormaAdmin import *
from keyboard import*
from database import*
from config import*
from Forma import*
import asyncio
from traits import*
import time
from FormaAdmin import*
import os
from tests import*
from Formas import*


generator = Generator()
btn = Button()
db = Database()

PRICE = 500000

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def pdf_received_handler(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî —ç—Ç–æ PDF
    if message.document.mime_type == 'application/pdf':
        document = message.document

        # Generate a unique filename
        user_id = message.from_user.id
        timestamp = int(time.time())
        random_int = Generator.generate_random_int()
        file_name = f"{user_id}_{timestamp}_{random_int}.pdf"
        file_path = os.path.join('./pdf/', file_name)

        # Download the PDF file
        file_info = await bot.get_file(document.file_id)
        await bot.download_file(file_info.file_path, file_path)

        # Process the PDF file
        pdf_reader = PDFReaders(file_path)
        pdf_reader.open_pdf()
        #result = pdf_reader.extract_specific_info()
        result = pdf_reader.extract_detailed_info()
        pdf_reader.close_pdf()

        print(result)
        print(len(result))

        async with state.proxy() as data:
            data['data'] = message.text
            data['pdf_result'] = result
            data['fileName'] = file_name
            data['len'] = len(result)
            if data['len'] == 16:
                if convert_currency_to_int(result[3]) == PRICE:
                    data['count'] = int(convert_currency_to_int(result[3]) / PRICE)
                    sum = PRICE * data['count']
                    data['sum'] = sum
                    print(data['sum'])
            elif data['len'] == 8:
                if convert_currency_to_int(result[1]) == PRICE:
                    data['count'] = int(convert_currency_to_int(result[1]) / PRICE)
                    sum = PRICE * data['count']
                    data['sum'] = sum
                    print(data['sum'])
               


        if data['len'] == 16:
            print(f"Expected sum: {data['sum']}, Actual sum: {convert_currency_to_int(data['pdf_result'][3])}")

            if convert_currency_to_int(data['pdf_result'][3]) != data['sum']: 
                await bot.send_message(
                    message.from_user.id,
                    text="*–¢”©–ª–µ–Ω–µ—Ç—ñ–Ω —Å—É–º–º–∞ “õ–∞—Ç–µ!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                    parse_mode="Markdown",
                    reply_markup=btn.menu()
                ) 
                return

            
            print(data['pdf_result'][3])
            print(data['pdf_result'][11])
        
            if data['pdf_result'][10] == "–°–∞—Ç—É—à—ã–Ω—ã“£ –ñ–°–ù/–ë–°–ù 900315402310" or data['pdf_result'][10] == "–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ 900315402310":
                print(db.CheckLoto(data['pdf_result'][6]))
                if db.CheckLoto(data['pdf_result'][6]) == True:
                    await bot.send_message(
                        message.from_user.id,
                        text="*–ß–ï–ö –¢”®–õ–ï–ù–Ü–ü “ö–û–ô–´–õ“í–ê–ù!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                        parse_mode="Markdown",
                        reply_markup=btn.menu()
                    )   
                    return

                await Forma.s3.set()
                await bot.send_message(
                    message.from_user.id,
                    text="*–¢–æ–π –∏–µ—Å—ñ–Ω—ñ“£ –∞—Ç—ã –∂”©–Ω—ñ–Ω –∂–∞–∑—ã“£—ã–∑*",
                    parse_mode="Markdown",
                )
                return
            else:
                await bot.send_message(
                    message.from_user.id,
                    text="*–î“±—Ä—ã—Å –µ–º–µ—Å —Å—á–µ—Ç“õ–∞ —Ç”©–ª–µ–¥—ñ“£—ñ–∑!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                    parse_mode="Markdown",
                    reply_markup=btn.menu_not_paid()
                )
        elif data['len'] == 8:
            print(f"Expected sum: {data['sum']}, Actual sum: {convert_currency_to_int(data['pdf_result'][1])}")

            if convert_currency_to_int(data['pdf_result'][1]) != data['sum']: 
                await bot.send_message(
                    message.from_user.id,
                    text="*–¢”©–ª–µ–Ω–µ—Ç—ñ–Ω —Å—É–º–º–∞ “õ–∞—Ç–µ!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                    parse_mode="Markdown",
                    reply_markup=btn.menu()
                ) 
                return

            
            print(data['pdf_result'][1])
            print(data['pdf_result'][3])
        
            if data['pdf_result'][3] == "–°–∞—Ç—É—à—ã–Ω—ã“£ –ñ–°–ù/–ë–°–ù 900315402310" or data['pdf_result'][3] == "–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ 900315402310":
                print(db.CheckLoto(data['pdf_result'][2]))
                if db.CheckLoto(data['pdf_result'][2]) == True:
                    await bot.send_message(
                        message.from_user.id,
                        text="*–ß–ï–ö –¢”®–õ–ï–ù–Ü–ü “ö–û–ô–´–õ“í–ê–ù!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                        parse_mode="Markdown",
                        reply_markup=btn.menu()
                    )   
                    return

                await Forma.s3.set()
                await bot.send_message(
                    message.from_user.id,
                    text="*–¢–æ–π –∏–µ—Å—ñ–Ω—ñ“£ –∞—Ç—ã –∂”©–Ω—ñ–Ω –∂–∞–∑—ã“£—ã–∑*",
                    parse_mode="Markdown",

                )
                return
            else:
                await bot.send_message(
                    message.from_user.id,
                    text="*–î“±—Ä—ã—Å –µ–º–µ—Å —Å—á–µ—Ç“õ–∞ —Ç”©–ª–µ–¥—ñ“£—ñ–∑!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                    parse_mode="Markdown",
                    reply_markup=btn.menu_not_paid()
                )  

    else:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ PDF-—Ñ–∞–π–ª, –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply("–¢–µ–∫, PDF —Ñ–∞–π–ª –∂—ñ–±–µ—Ä—É –∫–µ—Ä–µ–∫!")
    

@dp.message_handler(commands=['admin'])
async def handler(message: types.Message):
    print(message.from_user.id)
    

    if message.from_user.id == admin or message.from_user.id == admin5:
        await bot.send_message(
        message.from_user.id,
        text="üòä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ %s !\n–°—ñ–∑–¥—ñ“£ —Å—Ç–∞—Ç—É—Å—ã“£—ã–∑ üë§ –ê–¥–º–∏–Ω(-–∫–∞-)*"%message.from_user.first_name,
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )
        

@dp.message_handler(commands=['address'])
async def handler(message: types.Message):
    print(message.from_user.id)
    

    await bot.send_message(
        message.from_user.id,
        text="üòä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ %s !\n–°—ñ–∑–¥—ñ“£ —Å—Ç–∞—Ç—É—Å—ã“£—ã–∑ üë§ –ê–¥–º–∏–Ω(-–∫–∞-)*"%message.from_user.first_name,
        parse_mode="Markdown",
        reply_markup=btn.all_address()
    )

@dp.message_handler(Text(equals="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id in {admin, admin2, admin3, admin5}:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        tik_tok_count = db.get_tiktok_count()
        instagram_count = db.get_instagram_count()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        stats_message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üîπ TikTok: {tik_tok_count} –∑–∞—Ö–æ–¥–æ–≤\n"
            f"üîπ Instagram: {instagram_count} –∑–∞—Ö–æ–¥–æ–≤\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply(stats_message, parse_mode="HTML")

@dp.message_handler(commands=['start', 'go'])
async def start_handler(message: types.Message):
    
    args = message.get_args()

    if args == "TikTok":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è TikTok
        db.tiktok_counter()
        await Formas.s1.set()
        await bot.send_message(
                message.from_user.id,
                text="*“ö“±—Ä–º–µ—Ç—Ç—ñ —Ç–æ–π—à—ã–ª “õ–∞–∑–∞“ì—ã–º! –ñ–∞–π “ì–∞–Ω–∞ —Ç–æ–π –∂–∞—Å–∞–ø –∞—Å—Ç—ã“£—ã–∑“ì–∞ —Ç–µ–º—ñ—Ä üöò —Ç“±–ª–ø–∞—Ä –º—ñ–Ω–≥—ñ“£—ñ–∑ –∫–µ–ª—Å–µ –±—ñ–∑–¥—ñ“£ –º–µ–π—Ä–∞–º—Ö–∞–Ω—ã–º—ã–∑–¥–∞ ü•≥ –º–µ—Ä–µ–π —Ç–æ–π –∂–∞—Å–∞“£—ã–∑\n“ö–∞–Ω–¥–∞–π —Ç–æ–π –∂–∞—Å–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ?*",
                parse_mode="Markdown",
                reply_markup=btn.typeOfCelebrate()
        )  
        return
    
    elif args == "Instagram":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è Instagram
        db.instagram_counter()
        await Formas.s1.set()
        await bot.send_message(
                message.from_user.id,
                text="*“ö“±—Ä–º–µ—Ç—Ç—ñ —Ç–æ–π—à—ã–ª “õ–∞–∑–∞“ì—ã–º! –ñ–∞–π “ì–∞–Ω–∞ —Ç–æ–π –∂–∞—Å–∞–ø –∞—Å—Ç—ã“£—ã–∑“ì–∞ —Ç–µ–º—ñ—Ä üöò —Ç“±–ª–ø–∞—Ä –º—ñ–Ω–≥—ñ“£—ñ–∑ –∫–µ–ª—Å–µ –±—ñ–∑–¥—ñ“£ –º–µ–π—Ä–∞–º—Ö–∞–Ω—ã–º—ã–∑–¥–∞ ü•≥ –º–µ—Ä–µ–π —Ç–æ–π –∂–∞—Å–∞“£—ã–∑\n“ö–∞–Ω–¥–∞–π —Ç–æ–π –∂–∞—Å–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ?*",
                parse_mode="Markdown",
                reply_markup=btn.typeOfCelebrate()
        ) 
        return 

    print(message.from_user.id)

    from datetime import datetime
    fileId = "AgACAgIAAxkBAAMCZ6H7ST5vYR0drn_R8JW6B0XQc00AAkjmMRtYghBJs5bEHKTuTjEBAAMCAAN5AAM2BA"

    user_id = message.from_user.id
    user_name = f"@{message.from_user.username}"
    time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    
    db.JustInsert(user_id, user_name, time_now)  
    
    if db.CheckUserPaid(message.from_user.id) == True:
        await Formas.s1.set()
        await bot.send_message(
                message.from_user.id,
                text="*“ö“±—Ä–º–µ—Ç—Ç—ñ —Ç–æ–π—à—ã–ª “õ–∞–∑–∞“ì—ã–º! –ñ–∞–π “ì–∞–Ω–∞ —Ç–æ–π –∂–∞—Å–∞–ø –∞—Å—Ç—ã“£—ã–∑“ì–∞ —Ç–µ–º—ñ—Ä üöò —Ç“±–ª–ø–∞—Ä –º—ñ–Ω–≥—ñ“£—ñ–∑ –∫–µ–ª—Å–µ –±—ñ–∑–¥—ñ“£ –º–µ–π—Ä–∞–º—Ö–∞–Ω—ã–º—ã–∑–¥–∞ ü•≥ –º–µ—Ä–µ–π —Ç–æ–π –∂–∞—Å–∞“£—ã–∑\n“ö–∞–Ω–¥–∞–π —Ç–æ–π –∂–∞—Å–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ?*",
                parse_mode="Markdown",
                reply_markup=btn.typeOfCelebrate()
        ) 
        return
    

    await Formas.s1.set()
    await bot.send_message(
            message.from_user.id,
            text="*“ö“±—Ä–º–µ—Ç—Ç—ñ —Ç–æ–π—à—ã–ª “õ–∞–∑–∞“ì—ã–º! –ñ–∞–π “ì–∞–Ω–∞ —Ç–æ–π –∂–∞—Å–∞–ø –∞—Å—Ç—ã“£—ã–∑“ì–∞ —Ç–µ–º—ñ—Ä üöò —Ç“±–ª–ø–∞—Ä –º—ñ–Ω–≥—ñ“£—ñ–∑ –∫–µ–ª—Å–µ –±—ñ–∑–¥—ñ“£ –º–µ–π—Ä–∞–º—Ö–∞–Ω—ã–º—ã–∑–¥–∞ ü•≥ –º–µ—Ä–µ–π —Ç–æ–π –∂–∞—Å–∞“£—ã–∑\n“ö–∞–Ω–¥–∞–π —Ç–æ–π –∂–∞—Å–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ?*",
            parse_mode="Markdown",
            reply_markup=btn.typeOfCelebrate()
    ) 


@dp.message_handler(Text(equals="ü•≥ –¢–æ–π –∂–∞—Å–∞—É"), content_types=['text'])
async def handler(message: types.Message):
    
    await Formas.s1.set()
    await bot.send_message(
            message.from_user.id,
            text="*“ö“±—Ä–º–µ—Ç—Ç—ñ —Ç–æ–π—à—ã–ª “õ–∞–∑–∞“ì—ã–º! –ñ–∞–π “ì–∞–Ω–∞ —Ç–æ–π –∂–∞—Å–∞–ø –∞—Å—Ç—ã“£—ã–∑“ì–∞ —Ç–µ–º—ñ—Ä üöò —Ç“±–ª–ø–∞—Ä –º—ñ–Ω–≥—ñ“£—ñ–∑ –∫–µ–ª—Å–µ –±—ñ–∑–¥—ñ“£ –º–µ–π—Ä–∞–º—Ö–∞–Ω—ã–º—ã–∑–¥–∞ ü•≥ –º–µ—Ä–µ–π —Ç–æ–π –∂–∞—Å–∞“£—ã–∑\n“ö–∞–Ω–¥–∞–π —Ç–æ–π –∂–∞—Å–∞“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ?*",
            parse_mode="Markdown",
            reply_markup=btn.typeOfCelebrate()
    ) 


@dp.callback_query_handler(lambda c: c.data in ["buy_celebrate", "accept"])
async def process_callback(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    await bot.answer_callback_query(callback_query.id)

    if callback_query.data == "buy_celebrate":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è "buy_cosmetics"
        await Forma.s1.set()
        await bot.send_message(
            callback_query.from_user.id,
            text="*“ö–∞–Ω—à–∞ —Å—É–º–º–∞“ì–∞ —Ç–æ–π –∂–∞—Å–∞–π—Å—ã–∑? 1 –±–∏–ª–µ—Ç “õ“±–Ω—ã 500 000 —Ç–µ“£–≥–µ\n–¢”©–º–µ–Ω–¥–µ–≥—ñ —Ç“Ø–π–º–µ–ª–µ—Ä–¥—ñ –±–∞—Å–∞ –æ—Ç—ã—Ä–∞ —Å—É–º–º–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑*",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
        )
    elif callback_query.data == "accept":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è "accept"
        await bot.send_message(
            callback_query.from_user.id,
            text="–°—ñ–∑ –æ—Ñ—Ñ–µ—Ä—Ç–∞–Ω—ã “õ–∞–±—ã–ª–¥–∞–¥—ã“£—ã–∑. –†–∞—Ö–º–µ—Ç! üòä\n\nPDF - —Ñ–æ—Ä–º–∞—Ç—Ç–∞ —á–µ–∫—Ç—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ üëá",
            reply_markup=btn.menu()
        )



# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF-—Ñ–∞–π–ª–∞
@dp.message_handler(content_types=types.ContentType.DOCUMENT, state='*')
async def pdf_received_handler(message: types.Message, state: FSMContext):
    pass

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO])
async def media_handler(message: types.Message, state: FSMContext):
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.content_type == 'photo':
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
    elif message.content_type == 'video':
        # –ü–æ–ª—É—á–∞–µ–º file_id –≤–∏–¥–µ–æ
        file_id = message.video.file_id

    if file_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['file_id'] = file_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º file_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            message.from_user.id,
            text=f"*FileID: {data['file_id']}*",
            parse_mode="Markdown",
        )
    else:
        await bot.send_message(
            message.from_user.id,
            text="–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞.",
        ) 

@dp.message_handler(Text(equals="üí∏ Money"), content_types=['text'])
async def handler(message: types.Message):
    
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        sum = db.get_money_sum()
        await bot.send_message(
                message.from_user.id,
                text="""*üí≥ –ñ–∞–ª–ø—ã “õ–∞—Ä–∞–∂–∞—Ç: %d*"""%sum,
                parse_mode="Markdown",
                reply_markup=btn.admin()
            )    


@dp.message_handler(Text(equals="üì® –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin5:
        await FormaAdmin.s1.set()
        await bot.send_message(
                message.from_user.id,
                text="""*‚úèÔ∏è –•–∞–±–∞—Ä–ª–∞–º–∞ —Ç–∏–ø—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑*""",
                parse_mode="Markdown",
                reply_markup=btn.typeMsg()
            )     



@dp.message_handler(commands=['help'])
@dp.message_handler(Text(equals="üì® –ê–¥–º–∏–Ω–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞"), content_types=['text'])
async def handler(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        text="""*+77005007032* - —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–æ–º–µ—Ä\n\n*+77786557207* - –ê–π–¥–∞–Ω–∞, –ë–ò–ó–ù–ï–° –í–ê–¢–°–ê–ü –ù–û–ú–ï–†""",
        parse_mode="Markdown",
        reply_markup=btn.linkTelega()
    )


@dp.message_handler(Text(equals="üìë –õ–æ—Ç–æ"), content_types=['text'])
async def send_just_excel(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin5:
        db.create_loto_excel('./excell/loto.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/loto.xlsx', 'rb'))

@dp.message_handler(Text(equals="üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã"), content_types=['text'])
async def send_client_excel(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin5:
        db.create_client_excel('./excell/clients.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/clients.xlsx', 'rb'))

@dp.message_handler(Text(equals="üëá Just Clicked"), content_types=['text'])
async def send_loto_excel(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin5:
        db.create_just_excel('./excell/just_users.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/just_users.xlsx', 'rb'))
    


@dp.message_handler(Text(equals="üì® –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*@senior_coffee_drinker*""",
        parse_mode="Markdown",
        reply_markup=btn.admin()
    ) 



@dp.message_handler(Text(equals="üßß “∞—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ–º"), content_types=['text'])
async def handler(message: types.Message):

    id_user = message.from_user.id            # Get the user ID from the message
    loto_ids = db.FetchIdLotoByUser(id_user)  # Fetch the list of id_loto for this user
    
    if loto_ids:
        ids_formatted = ", ".join(map(str, loto_ids))  # Format the list as a comma-separated string
        response_text = f"–°—ñ–∑–¥—ñ“£ “±—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ“£ ID-–ª–∞—Ä—ã: {ids_formatted}"
    else:
        response_text = "–°—ñ–∑–¥—ñ“£ “±—Ç—ã—Å –±–∏–ª–µ—Ç—ñ“£—ñ–∑ –∂–æ“õ."

    await bot.send_message(
        message.from_user.id,
        text=response_text,
        parse_mode="Markdown",
        reply_markup=btn.menu()
    )

@dp.message_handler(Text(equals="‚óÄÔ∏è –ö–µ—Ä—ñ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id == admin or message.from_user.id == admin5:
        await bot.send_message(
        message.from_user.id,
        text="üòä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ %s !\n–°—ñ–∑–¥—ñ“£ —Å—Ç–∞—Ç—É—Å—ã“£—ã–∑ üë§ –ê–¥–º–∏–Ω(-–∫–∞-)*"%message.from_user.first_name,
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )

async def send_pdf_with_caption(user_id, id_loto, caption):
    loto_info = db.fetch_loto_by_id(id_loto)
    if not loto_info:
        await bot.send_message(user_id, text="PDF not found.")
        return

    receipt = loto_info[3]  # Adjusted index for receipt column
    pdf_path = f"/home/cinema/pdf/{receipt}"
    
    if os.path.exists(pdf_path):
        await bot.send_document(
            user_id,
            document=open(pdf_path, 'rb'),
            caption=caption,
            reply_markup=btn.gift()
        )
    else:
        await bot.send_message(user_id, text="PDF file not found.")


