from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from load import dp, bot
import asyncio
from datetime import datetime
import os
from traits import *

# –ó–¥–µ—Å—å –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –≤–∞—à–∏ –º–æ–¥—É–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from keyboard import *
from database import Database
from aiogram.utils.exceptions import MessageToEditNotFound  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

PRICE = 500000

generator = Generator()
btn = Button()
db = Database()

# Ensure the directory exists
os.makedirs('./pdf/', exist_ok=True)


class Formas(StatesGroup):
    s1 = State()  # –¢–æ–π–¥—ã“£ —Ç“Ø—Ä—ñ (celebration type)
    s2 = State()  # “ö–∞–π “õ–∞–ª–∞ (city selection)
    s3 = State()  # –ú–µ–π—Ä–∞–º—Ö–∞–Ω–∞ (restaurant selection)
    s4 = State()  # –ê–¥–∞–º —Å–∞–Ω—ã (people count)
    s5 = State()  # –ê—Å –º”ô–∑—ñ—Ä—ñ (meal selection)
    s6 = State()  # Event —Ç“Ø—Ä—ñ (personnel selection & final calculation)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
async def delete_last_bot_message(chat_id: int, state: FSMContext):
    async with state.proxy() as data:
        if "last_bot_message_id" in data:
            try:
                await bot.delete_message(chat_id, data["last_bot_message_id"])
            except Exception:
                pass
            data.pop("last_bot_message_id", None)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def store_bot_message(state: FSMContext, message: types.Message):
    async with state.proxy() as data:
        data["last_bot_message_id"] = message.message_id


# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s1: –í–≤–æ–¥ —Ç–∏–ø–∞ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞ --------------------------
@dp.message_handler(state=Formas.s1)
async def process_s1(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await delete_last_bot_message(message.chat.id, state)
    
    async with state.proxy() as data:
        data['type_of_celebrate'] = message.text

    await Formas.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ s2

    await bot.send_chat_action(message.from_user.id, action="typing")
    await asyncio.sleep(1)
    
    sent_msg = await bot.send_message(
        message.from_user.id,
        text="*“ö–∞–ª–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑!*",
        parse_mode="Markdown",
        reply_markup=btn.cities()  # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê–ª–º–∞—Ç—ã")
    )
    await store_bot_message(state, sent_msg)


# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s2: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ (inline) --------------------------
@dp.callback_query_handler(lambda c: c.data == "almaty", state=Formas.s2)
async def process_s2(callback_query: types.CallbackQuery, state: FSMContext):
    await delete_last_bot_message(callback_query.message.chat.id, state)
    
    async with state.proxy() as data:
        data['city'] = "–ê–ª–º–∞—Ç—ã"
    
    await Formas.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ s3

    await bot.send_chat_action(callback_query.from_user.id, action="typing")
    await asyncio.sleep(1)
    
    sent_msg = await bot.send_message(
        callback_query.from_user.id,
        text="*üè¢ –ú–µ–π—Ä–∞–º—Ö–∞–Ω–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑*",
        parse_mode="Markdown",
        reply_markup=btn.restaurant()  # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    )
    await store_bot_message(state, sent_msg)
    await callback_query.answer()


# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s3: –í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (inline) --------------------------
@dp.callback_query_handler(lambda c: c.data == "dostar", state=Formas.s3)
async def process_s3(callback_query: types.CallbackQuery, state: FSMContext):
    await delete_last_bot_message(callback_query.message.chat.id, state)
    
    async with state.proxy() as data:
        data['restaurant'] = "üè¢ –î–æ—Å—Ç–∞—Ä –º–µ–π—Ä–∞–º—Ö–∞–Ω—ã—Å—ã"
    
    await Formas.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ s4

    await bot.send_chat_action(callback_query.from_user.id, action="typing")
    await asyncio.sleep(1)
    
    sent_msg = await bot.send_message(
        callback_query.from_user.id,
        text="*üë§ –ê–¥–∞–º —Å–∞–Ω—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑*",
        parse_mode="Markdown",
        reply_markup=btn.countPeople()
    )
    await store_bot_message(state, sent_msg)
    await callback_query.answer()


# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s4: –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π --------------------------
@dp.message_handler(state=Formas.s4)
async def process_s4(message: types.Message, state: FSMContext):
    await delete_last_bot_message(message.chat.id, state)
    
    async with state.proxy() as data:
        data['people'] = int(message.text)
    
    await Formas.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ s5

    await bot.send_chat_action(message.from_user.id, action="typing")
    await asyncio.sleep(1)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (ReplyKeyboardRemove)
    sent_msg1 = await bot.send_message(
        message.from_user.id,
        text="*üçΩ –ê—Å –º”ô–∑—ñ—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑*",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await store_bot_message(state, sent_msg1)
    
    await asyncio.sleep(1)
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –∞—Å –º”ô–∑—ñ—Ä—ñ
    sent_msg2 = await bot.send_message(
        message.from_user.id,
        text="*üçΩ –ê—Å –º”ô–∑—ñ—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑*",
        parse_mode="Markdown",
        reply_markup=btn.meal_menu()
    )
    await store_bot_message(state, sent_msg2)


# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s5: –í—ã–±–æ—Ä –∞—Å –º”ô–∑—ñ—Ä—ñ (inline) --------------------------
@dp.callback_query_handler(lambda c: c.data in ["10000", "25000", "35000", "45000"], state=Formas.s5)
async def process_meal_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await delete_last_bot_message(callback_query.message.chat.id, state)
    
    async with state.proxy() as data:
        data['mealMenu'] = callback_query.data
        data['mealPrice'] = int(callback_query.data)
    
    await Formas.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ s6

    await bot.send_chat_action(callback_query.from_user.id, action="typing")
    await asyncio.sleep(1)
    
    sent_msg = await bot.send_message(
        callback_query.from_user.id,
        text=f"*–°—ñ–∑ —Ç–∞“£–¥–∞–¥—ã“£—ã–∑:* {data['mealPrice']} —Ç–µ“£–≥–µ\n–¢–æ–π–¥–∞ –±–æ–ª–∞—Ç—ã–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª–¥–∞—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑ üëá",
        parse_mode="Markdown",
        reply_markup=btn.event_menu()
    )
    await store_bot_message(state, sent_msg)
    await callback_query.answer()


# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s6: –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (inline, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) --------------------------
@dp.callback_query_handler(lambda c: c.data.startswith("event_"), state=Formas.s6)
async def process_event_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if 'event' not in data:
            data['event'] = []
        if 'event_sum' not in data:
            data['event_sum'] = 0

        event_mapping = {
            "event_asaba": ("üï∫ –ê—Å–∞–±–∞", 100000),
            "event_bishi": ("üëØ‚Äç‚ôÄÔ∏è –ë–∏—à—ñ", 100000),
            "event_anshi": ("üé§ ”ò–Ω—à—ñ", 100000)
        }

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "‚úÖ –î–∞–π—ã–Ω" ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback_query.data == "event_done":
            try:
                await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
            except Exception:
                pass

            people = data.get('people', 0)
            meal_price = data.get('mealPrice', 0)
            event_sum = data.get('event_sum', 0)
            total_sum = people * meal_price + event_sum
            prepayment = int(total_sum * 0.2)
            event_list = ', '.join(data.get('event', ["–¢–∞“£–¥–∞–ª–º–∞–¥—ã"]))
            summary_text = (
                f"üìä *–¢–∞–ø—Å—ã—Ä—ã—Å –µ—Å–µ–±—ñ:*\n\n"
                f"üë• *–ê–¥–∞–º —Å–∞–Ω—ã:* {people} –∞–¥–∞–º\n"
                f"üçΩ *–ê—Å –º”ô–∑—ñ—Ä—ñ–Ω—ñ“£ –±–∞“ì–∞—Å—ã:* {meal_price} —Ç–≥/–∞–¥–∞–º\n"
                f"üé≠ *–¢–æ–π–¥–∞“ì—ã –ø–µ—Ä—Å–æ–Ω–∞–ª:* {event_list}\n"
                f"üí∞ *“ö–æ—Å—ã–º—à–∞ —à—ã“ì—ã–Ω–¥–∞—Ä:* {event_sum} —Ç–≥\n\n"
                f"üìå *–ñ–∞–ª–ø—ã —Å–æ–º–∞:* {total_sum} —Ç–≥\n"
                f"‚ö° *–ê–ª–¥—ã–Ω –∞–ª–∞ —Ç”©–ª–µ–º (20%):* {prepayment} —Ç–≥\n\n"
                f"üì¢ –ï–≥–µ—Ä —Å—ñ–∑ —ñ—Å-—à–∞—Ä–∞–Ω—ã —Ä–µ—Å–º–∏ —Ç“Ø—Ä–¥–µ —Ä”ô—Å—ñ–º–¥–µ–≥—ñ“£—ñ–∑ –∫–µ–ª—Å–µ, –∞–ª–¥—ã–º–µ–Ω 20% –∞–ª–¥—ã–Ω –∞–ª–∞ —Ç”©–ª–µ–º –∂–∞—Å–∞“£—ã–∑! "
                f"“ö–∞–ª“ì–∞–Ω —Å–æ–º–∞–Ω—ã –º–µ–π—Ä–∞–º—Ö–∞–Ω–∞“ì–∞ —Ç—ñ–∫–µ–ª–µ–π —Ç”©–ª–µ–π—Å—ñ–∑."
            )
            sent_msg = await bot.send_message(
                callback_query.from_user.id,
                text=summary_text,
                parse_mode="Markdown",
                reply_markup=btn.payment()
            )
            await store_bot_message(state, sent_msg)
            await callback_query.answer("–¢–∞“£–¥–∞—É –∞—è“õ—Ç–∞–ª–¥—ã!")
            await state.finish()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        event_name, event_price = event_mapping.get(callback_query.data)
        if event_name in data['event']:
            data['event'].remove(event_name)
            data['event_sum'] -= event_price
        else:
            data['event'].append(event_name)
            data['event_sum'] += event_price

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
        new_buttons = [
            types.InlineKeyboardButton(text=label, callback_data=key)
            for key, (label, price) in event_mapping.items() if label not in data['event']
        ]
        new_buttons.append(types.InlineKeyboardButton("‚úÖ –î–∞–π—ã–Ω", callback_data="event_done"))
        new_keyboard = types.InlineKeyboardMarkup(row_width=1)
        new_keyboard.add(*new_buttons)

        updated_text = (
            f"üé≠ *–¢–æ–π“ì–∞ “õ–∞–∂–µ—Ç—Ç—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª–¥—ã —Ç–∞“£–¥–∞“£—ã–∑*\n\n"
            f"“ö–æ—Å—ã–ª“ì–∞–Ω: {', '.join(data['event']) if data['event'] else '–ï—à–∫—ñ–º —Ç–∞“£–¥–∞–ª–º–∞–¥—ã'}\n"
            f"üí∞ –ñ–∞–ª–ø—ã –±–∞“ì–∞: {data['event_sum']} —Ç–≥"
        )
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await callback_query.message.edit_text(
                text=updated_text,
                parse_mode="Markdown",
                reply_markup=new_keyboard
            )
        except MessageToEditNotFound:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_msg = await bot.send_message(
                callback_query.from_user.id,
                text=updated_text,
                parse_mode="Markdown",
                reply_markup=new_keyboard
            )
            await store_bot_message(state, sent_msg)
        await callback_query.answer(f"{event_name} {'“õ–æ—Å—ã–ª–¥—ã' if event_name in data['event'] else '–∞–ª—ã–Ω–¥—ã'}!")
