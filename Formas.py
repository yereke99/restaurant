from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from load import dp, bot
import asyncio
from datetime import datetime
import os
from traits import *
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import MessageToEditNotFound
import calendar
from datetime import date, timedelta


# –ó–¥–µ—Å—å –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –≤–∞—à–∏ –º–æ–¥—É–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from keyboard import *
from database import Database
from aiogram.utils.exceptions import MessageToEditNotFound  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

PRICE = 500000

generator = Generator()
btn = Button()
db = Database()

# Ensure the directory exists
os.makedirs('./pdf/', exist_ok=True)


class Formas(StatesGroup):
    s1 = State()  # –¢–æ–π–¥—ã“£ —Ç“Ø—Ä—ñ (celebration type)
    s2 = State()  # “ö–∞–π “õ–∞–ª–∞ (city selection)
    s3 = State()  # –ú–µ–π—Ä–∞–º—Ö–∞–Ω–∞ (restaurant selection)
    s4 = State()  # –ê–¥–∞–º —Å–∞–Ω—ã (people count)
    s5 = State()  # –ê—Å –º”ô–∑—ñ—Ä—ñ (meal selection)
    s6 = State()  # –¢–æ–π ”©—Ç–µ—Ç—ñ–Ω –∫“Ø–Ω!
    s7 = State()  # Event —Ç“Ø—Ä—ñ (personnel selection & final calculation)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
async def delete_last_bot_message(chat_id: int, state: FSMContext):
    async with state.proxy() as data:
        if "last_bot_message_id" in data:
            try:
                await bot.delete_message(chat_id, data["last_bot_message_id"])
            except Exception:
                pass
            data.pop("last_bot_message_id", None)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def store_bot_message(state: FSMContext, message: types.Message):
    async with state.proxy() as data:
        data["last_bot_message_id"] = message.message_id


# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s1: –í–≤–æ–¥ —Ç–∏–ø–∞ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞ --------------------------
@dp.message_handler(state=Formas.s1)
async def process_s1(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await delete_last_bot_message(message.chat.id, state)
    
    async with state.proxy() as data:
        data['type_of_celebrate'] = message.text

    await Formas.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ s2

    await bot.send_chat_action(message.from_user.id, action="typing")
    await asyncio.sleep(1)
    
    sent_msg = await bot.send_message(
        message.from_user.id,
        text="*“ö–∞–ª–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑!*",
        parse_mode="Markdown",
        reply_markup=btn.cities()  # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê–ª–º–∞—Ç—ã")
    )
    await store_bot_message(state, sent_msg)


# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s2: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ (inline) --------------------------
@dp.callback_query_handler(lambda c: c.data == "almaty", state=Formas.s2)
async def process_s2(callback_query: types.CallbackQuery, state: FSMContext):
    await delete_last_bot_message(callback_query.message.chat.id, state)
    
    async with state.proxy() as data:
        data['city'] = "–ê–ª–º–∞—Ç—ã"
    
    await Formas.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ s3

    await bot.send_chat_action(callback_query.from_user.id, action="typing")
    await asyncio.sleep(1)
    
    sent_msg = await bot.send_message(
        callback_query.from_user.id,
        text="*üè¢ –ú–µ–π—Ä–∞–º—Ö–∞–Ω–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑*",
        parse_mode="Markdown",
        reply_markup=btn.restaurant()  # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    )
    await store_bot_message(state, sent_msg)
    await callback_query.answer()


# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s3: –í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (inline) --------------------------
@dp.callback_query_handler(lambda c: c.data == "dostar", state=Formas.s3)
async def process_s3(callback_query: types.CallbackQuery, state: FSMContext):
    await delete_last_bot_message(callback_query.message.chat.id, state)
    
    async with state.proxy() as data:
        data['restaurant'] = "üè¢ –î–æ—Å—Ç–∞—Ä –º–µ–π—Ä–∞–º—Ö–∞–Ω—ã—Å—ã"
    
    await Formas.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ s4

    await bot.send_chat_action(callback_query.from_user.id, action="typing")
    await asyncio.sleep(1)
    
    sent_msg = await bot.send_message(
        callback_query.from_user.id,
        text="*üë§ –ê–¥–∞–º —Å–∞–Ω—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑*",
        parse_mode="Markdown",
        reply_markup=btn.countPeople()
    )
    await store_bot_message(state, sent_msg)
    await callback_query.answer()


# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s4: –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π --------------------------
@dp.message_handler(state=Formas.s4)
async def process_s4(message: types.Message, state: FSMContext):
    await delete_last_bot_message(message.chat.id, state)
    
    async with state.proxy() as data:
        data['people'] = int(message.text)
    
    await Formas.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ s5

    await bot.send_chat_action(message.from_user.id, action="typing")
    await asyncio.sleep(1)
    
    
    await asyncio.sleep(1)
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –∞—Å –º”ô–∑—ñ—Ä—ñ
    sent_msg2 = await bot.send_message(
        message.from_user.id,
        text="*üçΩ –ê—Å –º”ô–∑—ñ—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑*",
        parse_mode="Markdown",
        reply_markup=btn.meal_menu()
    )
    await store_bot_message(state, sent_msg2)


# -----------------------------------------------------------------------------
# --- INLINE-–ö–ê–õ–ï–ù–î–ê–†–¨ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (—Å–æ—Å—Ç–æ—è–Ω–∏–µ s6) ---

def add_months(sourcedate: date, months: int) -> date:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞, —Å–º–µ—â—ë–Ω–Ω–æ–≥–æ –Ω–∞ months –æ—Ç sourcedate.
    """
    month = sourcedate.month - 1 + months
    year = sourcedate.year + month // 12
    month = month % 12 + 1
    return date(year, month, 1)

def generate_calendar(offset: int = 0) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º offset.
    –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–∞—Ç—ã –æ—Ç –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –¥–æ —Ç—Ä—ë—Ö –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä—ë–¥.
    """
    today = date.today()
    allowed_start = today + timedelta(days=1)
    allowed_end = add_months(today, 3)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äì —Ç—Ä–∏ –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥ (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –º–µ—Å—è—Ü (offset=0 ‚Äì —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, offset=1 ‚Äì —Å–ª–µ–¥—É—é—â–∏–π –∏ —Ç.–¥.)
    target_date = add_months(today, offset)
    first_day = target_date  # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    days_in_month = calendar.monthrange(first_day.year, first_day.month)[1]
    
    keyboard = InlineKeyboardMarkup(row_width=7)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    header_text = first_day.strftime('%B %Y')
    keyboard.add(InlineKeyboardButton(header_text, callback_data="ignore"))
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_header = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.add(*[InlineKeyboardButton(day, callback_data="ignore") for day in days_header])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–µ—Å—è—Ü (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0)
    first_weekday = first_day.weekday()
    buttons = [InlineKeyboardButton(" ", callback_data="ignore") for _ in range(first_weekday)]
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–Ω–æ–ø–∫–∞–º–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–Ω–µ–π
    for day in range(1, days_in_month + 1):
        current_date = date(first_day.year, first_day.month, day)
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –∏–ª–∏ –ø–æ–∑–∂–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∫–æ–Ω—Ü–∞ ‚Äì –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
        if current_date < allowed_start or current_date > allowed_end:
            buttons.append(InlineKeyboardButton("‚õî", callback_data="ignore"))
        else:
            buttons.append(InlineKeyboardButton(str(day), callback_data=f"cal_date_{current_date.isoformat()}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥—ã –ø–æ 7 –∫–Ω–æ–ø–æ–∫ (–Ω–µ–¥–µ–ª—è)
    for i in range(0, len(buttons), 7):
        keyboard.add(*buttons[i:i+7])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä—ë–¥)
    nav_buttons = []
    if offset > 0:
        nav_buttons.append(InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data=f"cal_prev_{offset-1}"))
    if offset < 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ç—Ä–µ–º—è –º–µ—Å—è—Ü–∞–º–∏
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚è©", callback_data=f"cal_next_{offset+1}"))
    if nav_buttons:
        keyboard.add(*nav_buttons)
    
    return keyboard

# -------------------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ s5: –í—ã–±–æ—Ä –∞—Å –º”ô–∑—ñ—Ä—ñ (inline) --------------------------
@dp.callback_query_handler(lambda c: c.data in ["10000", "25000", "35000", "45000"], state=Formas.s5)
async def process_meal_selection(callback_query: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    await delete_last_bot_message(callback_query.message.chat.id, state)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Å –º”ô–∑—ñ—Ä—ñ –∏ –µ–≥–æ —Ü–µ–Ω—É
    async with state.proxy() as data:
        data['mealMenu'] = callback_query.data
        data['mealPrice'] = int(callback_query.data)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äì –≤—ã–±–æ—Ä –¥–∞—Ç—ã (s6)
    await Formas.next()
    
    await bot.send_chat_action(callback_query.from_user.id, action="typing")
    await asyncio.sleep(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
    sent_msg = await bot.send_message(
        callback_query.from_user.id,
        text=f"*–°—ñ–∑ —Ç–∞“£–¥–∞–¥—ã“£—ã–∑:* {data['mealPrice']} —Ç–µ“£–≥–µ\n”®—Ç–µ—Ç—ñ–Ω –∫“Ø–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        parse_mode="Markdown",
        reply_markup=generate_calendar(0)  # –§—É–Ω–∫—Ü–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∞—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–º–µ—â–µ–Ω–∏—è 0)
    )
    await store_bot_message(state, sent_msg)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—Å–æ—Å—Ç–æ—è–Ω–∏–µ s6)
@dp.callback_query_handler(lambda c: c.data.startswith("cal_prev_"), state=Formas.s6)
async def calendar_prev(callback_query: types.CallbackQuery, state: FSMContext):
    offset = int(callback_query.data.split("_")[-1])
    await callback_query.message.edit_reply_markup(reply_markup=generate_calendar(offset))
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("cal_next_"), state=Formas.s6)
async def calendar_next(callback_query: types.CallbackQuery, state: FSMContext):
    offset = int(callback_query.data.split("_")[-1])
    await callback_query.message.edit_reply_markup(reply_markup=generate_calendar(offset))
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("cal_date_"), state=Formas.s6)
async def calendar_date(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    date_str = callback_query.data.replace("cal_date_", "")
    async with state.proxy() as data:
        data['event_date'] = date_str
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã ‚Äì —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        text=f"–°—ñ–∑ —Ç–∞“£–¥–∞–¥—ã“£—ã–∑: {date_str}",  # "–í—ã –≤—ã–±—Ä–∞–ª–∏: {date_str}"
        parse_mode="Markdown"
    )
    await callback_query.answer()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ s7 ‚Äì –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    await Formas.next()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    personnel_keyboard = InlineKeyboardMarkup(row_width=1)
    personnel_keyboard.add(
        InlineKeyboardButton("üï∫ –ê—Å–∞–±–∞", callback_data="event_asaba"),
        InlineKeyboardButton("üëØ‚Äç‚ôÄÔ∏è –ë–∏—à—ñ", callback_data="event_bishi"),
        InlineKeyboardButton("üé§ ”ò–Ω—à—ñ", callback_data="event_anshi"),
        InlineKeyboardButton("‚úÖ –î–∞–π—ã–Ω", callback_data="event_done")
    )
    await bot.send_message(
        callback_query.from_user.id,
        text="üé≠ *–¢–æ–π“ì–∞ “õ–∞–∂–µ—Ç—Ç—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª–¥—ã —Ç–∞“£–¥–∞“£—ã–∑*",  # "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
        parse_mode="Markdown",
        reply_markup=personnel_keyboard
    )

# -----------------------------------------------------------------------------
# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ s7: –ü–µ—Ä—Å–æ–Ω–∞–ª–¥—ã —Ç–∞“£–¥–∞—É (–±–∞“ì–∞—Å—ã –µ—Å–µ–ø–∫–µ –∞–ª—ã–Ω–±–∞–π–¥—ã, —Ç–µ–∫ –º”ô—Ç—ñ–Ω —Ä–µ—Ç—ñ–Ω–¥–µ) ---
@dp.callback_query_handler(lambda c: c.data.startswith("event_"), state=Formas.s7)
async def process_event_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if 'event' not in data:
            data['event'] = []
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–¥—ã —Ç–∞“£–¥–∞—É–¥—ã“£ –º—ç–ø–∏–Ω–≥—ñ (–±–∞“ì–∞–ª–∞—Ä –µ—Å–µ–ø–∫–µ –∞–ª—ã–Ω–±–∞–π–¥—ã)
        event_mapping = {
            "event_asaba": "üï∫ –ê—Å–∞–±–∞",
            "event_bishi": "üëØ‚Äç‚ôÄÔ∏è –ë–∏—à—ñ",
            "event_anshi": "üé§ ”ò–Ω—à—ñ"
        }
        # –ï–≥–µ—Ä "‚úÖ –î–∞–π—ã–Ω" –±–∞—Ç—ã—Ä–º–∞—Å—ã –±–∞—Å—ã–ª—Å–∞ ‚Äì —Ç–∞“£–¥–∞—É –∞—è“õ—Ç–∞–ª–∞–¥—ã
        if callback_query.data == "event_done":
            try:
                await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
            except Exception:
                pass

            # –ê–ª–¥—ã“£“ì—ã –∫“Ø–π–¥–µ–Ω “õ–∞–∂–µ—Ç—Ç—ñ –º”ô–Ω–¥–µ—Ä–¥—ñ –∞–ª–∞–º—ã–∑
            people = data.get('people', 0)
            meal_price = data.get('mealPrice', 0)
            event_list = data.get('event', [])
            event_date = data.get('event_date', '–ö”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω')

            # –ñ–∞–ª–ø—ã —Å–æ–º–∞–Ω—ã –µ—Å–µ–ø—Ç–µ–π–º—ñ–∑ (–º—ã—Å–∞–ª—ã, –∞–¥–∞–º —Å–∞–Ω—ã * –∞—Å –º”ô–∑—ñ—Ä—ñ–Ω—ñ“£ –±–∞“ì–∞—Å—ã)
            total_sum = people * meal_price  
            # –†–æ–∑—ã–≥—Ä—ã—à“õ–∞ “õ–∞—Ç—ã—Å—É “Ø—à—ñ–Ω 20% –∞–ª–¥—ã–Ω –∞–ª–∞ —Ç”©–ª–µ–º
            prepayment = int(total_sum * 0.2)

            summary_text = (
                f"üìä *–¢–∞–ø—Å—ã—Ä—ã—Å –µ—Å–µ–±—ñ:*\n\n"
                f"üë• *–ê–¥–∞–º —Å–∞–Ω—ã:* {people} –∞–¥–∞–º\n"
                f"üçΩ *–ê—Å –º”ô–∑—ñ—Ä—ñ–Ω—ñ“£ –±–∞“ì–∞—Å—ã:* {meal_price} —Ç–≥/–∞–¥–∞–º\n"
                f"üé≠ *–¢–æ–π–¥–∞“ì—ã –ø–µ—Ä—Å–æ–Ω–∞–ª:* {', '.join(event_list) if event_list else '–¢–∞“£–¥–∞–ª–º–∞–¥—ã'}\n"
                f"üìÖ *”®—Ç–µ—Ç—ñ–Ω —ñ—Å-—à–∞—Ä–∞ –∫“Ø–Ω—ñ:* {event_date}\n\n"
                f"üí∞ *–ñ–∞–ª–ø—ã —Å–æ–º–∞:* {total_sum} —Ç–≥\n"
                f"‚ö° *–†–æ–∑—ã–≥—Ä—ã—à“õ–∞ “õ–∞—Ç—ã—Å—É “Ø—à—ñ–Ω, –∂–∞–ª–ø—ã —Å–æ–º–∞–Ω—ã“£ 20% –∞–ª–¥—ã–Ω –∞–ª–∞ —Ç”©–ª–µ–º –∂–∞—Å–∞—É “õ–∞–∂–µ—Ç:* {prepayment} —Ç–≥\n\n"
                f"‚úÖ –¢”©–ª–µ–º –∂–∞—Å–∞–ª“ì–∞–Ω —Å–æ“£ —Å—ñ–∑–≥–µ —Ä–æ–∑—ã–≥—Ä—ã—à –Ω”©–º—ñ—Ä—ñ –±–µ—Ä—ñ–ª–µ–¥—ñ!"
            )
            sent_msg = await bot.send_message(
                callback_query.from_user.id,
                text=summary_text,
                parse_mode="Markdown",
                reply_markup=btn.payment()  # –¢”©–ª–µ–º –∂–∞—Å–∞—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞
            )
            await store_bot_message(state, sent_msg)
            await callback_query.answer("–¢–∞“£–¥–∞—É –∞—è“õ—Ç–∞–ª–¥—ã!")
            await state.finish()
            return

        # –ï–≥–µ—Ä –±–∞—Å“õ–∞ –±–∞—Ç—ã—Ä–º–∞ –±–∞—Å—ã–ª—Å–∞ ‚Äì –Ω–∞“õ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–¥—ã —Ç–∞“£–¥–∞—É ”©“£–¥–µ–ª–µ–¥—ñ
        event_name = event_mapping.get(callback_query.data)
        if event_name is None:
            return
        if event_name in data['event']:
            data['event'].remove(event_name)
        else:
            data['event'].append(event_name)
        # –ñ–∞“£–∞—Ä—Ç—ã–ª“ì–∞–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äì —Ç–∞“£–¥–∞–ª–º–∞“ì–∞–Ω –æ–ø—Ü–∏—è–ª–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç–µ–¥—ñ
        new_buttons = [
            InlineKeyboardButton(text=label, callback_data=key)
            for key, label in event_mapping.items() if label not in data['event']
        ]
        new_buttons.append(InlineKeyboardButton("‚úÖ –î–∞–π—ã–Ω", callback_data="event_done"))
        new_keyboard = InlineKeyboardMarkup(row_width=1)
        new_keyboard.add(*new_buttons)
        updated_text = (
            f"üé≠ *–¢–æ–π“ì–∞ “õ–∞–∂–µ—Ç—Ç—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª–¥—ã —Ç–∞“£–¥–∞“£—ã–∑*\n\n"
            f"“ö–æ—Å—ã–ª“ì–∞–Ω: {', '.join(data['event']) if data['event'] else '–ï—à–∫—ñ–º —Ç–∞“£–¥–∞–ª–º–∞–¥—ã'}"
        )
        try:
            await callback_query.message.edit_text(
                text=updated_text,
                parse_mode="Markdown",
                reply_markup=new_keyboard
            )
        except MessageToEditNotFound:
            sent_msg = await bot.send_message(
                callback_query.from_user.id,
                text=updated_text,
                parse_mode="Markdown",
                reply_markup=new_keyboard
            )
            await store_bot_message(state, sent_msg)
        await callback_query.answer(f"{event_name} {'“õ–æ—Å—ã–ª–¥—ã' if event_name in data['event'] else '–∞–ª—ã–Ω–¥—ã'}!")
